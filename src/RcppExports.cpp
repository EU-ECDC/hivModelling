// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// GetDelta
Rcpp::NumericVector GetDelta(const double& time, const double& delta4Fac, const Rcpp::NumericMatrix& deltaM, const Rcpp::NumericVector& tc, const size_t& deadStageIdx);
RcppExport SEXP _hivModelling_GetDelta(SEXP timeSEXP, SEXP delta4FacSEXP, SEXP deltaMSEXP, SEXP tcSEXP, SEXP deadStageIdxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta4Fac(delta4FacSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type deltaM(deltaMSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type tc(tcSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type deadStageIdx(deadStageIdxSEXP);
    rcpp_result_gen = Rcpp::wrap(GetDelta(time, delta4Fac, deltaM, tc, deadStageIdx));
    return rcpp_result_gen;
END_RCPP
}
// GetBSplineCubic
double GetBSplineCubic(const double& time, const Rcpp::NumericVector& theta, const Rcpp::NumericVector& myKnots, const size_t& k);
RcppExport SEXP _hivModelling_GetBSplineCubic(SEXP timeSEXP, SEXP thetaSEXP, SEXP myKnotsSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type myKnots(myKnotsSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(GetBSplineCubic(time, theta, myKnots, k));
    return rcpp_result_gen;
END_RCPP
}
// GetBSpline
double GetBSpline(const double& time, const Rcpp::NumericVector& theta, const size_t& kOrder, const size_t& modelSplineN, const Rcpp::NumericVector& myKnots, const double& minYear, const double& maxYear);
RcppExport SEXP _hivModelling_GetBSpline(SEXP timeSEXP, SEXP thetaSEXP, SEXP kOrderSEXP, SEXP modelSplineNSEXP, SEXP myKnotsSEXP, SEXP minYearSEXP, SEXP maxYearSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type kOrder(kOrderSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type modelSplineN(modelSplineNSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type myKnots(myKnotsSEXP);
    Rcpp::traits::input_parameter< const double& >::type minYear(minYearSEXP);
    Rcpp::traits::input_parameter< const double& >::type maxYear(maxYearSEXP);
    rcpp_result_gen = Rcpp::wrap(GetBSpline(time, theta, kOrder, modelSplineN, myKnots, minYear, maxYear));
    return rcpp_result_gen;
END_RCPP
}
// Swap1D
void Swap1D(Rcpp::NumericVector& y, const int a, const int b);
RcppExport SEXP _hivModelling_Swap1D(SEXP ySEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int >::type a(aSEXP);
    Rcpp::traits::input_parameter< const int >::type b(bSEXP);
    Swap1D(y, a, b);
    return R_NilValue;
END_RCPP
}
// Swap2D
void Swap2D(Rcpp::NumericMatrix& y, const int a1, const int a2, const int b1, const int b2);
RcppExport SEXP _hivModelling_Swap2D(SEXP ySEXP, SEXP a1SEXP, SEXP a2SEXP, SEXP b1SEXP, SEXP b2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< const int >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< const int >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< const int >::type b2(b2SEXP);
    Swap2D(y, a1, a2, b1, b2);
    return R_NilValue;
END_RCPP
}
// CountOdeintLoop
Rcpp::List CountOdeintLoop(const Rcpp::NumericVector& modelYears);
RcppExport SEXP _hivModelling_CountOdeintLoop(SEXP modelYearsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type modelYears(modelYearsSEXP);
    rcpp_result_gen = Rcpp::wrap(CountOdeintLoop(modelYears));
    return rcpp_result_gen;
END_RCPP
}
// CountOdeintReturn
Rcpp::NumericVector CountOdeintReturn(Rcpp::NumericVector& ystart, const size_t& nVar, const double& x1, const double& x2, const double& minYear, const double& maxYear);
RcppExport SEXP _hivModelling_CountOdeintReturn(SEXP ystartSEXP, SEXP nVarSEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP minYearSEXP, SEXP maxYearSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type ystart(ystartSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type nVar(nVarSEXP);
    Rcpp::traits::input_parameter< const double& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const double& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< const double& >::type minYear(minYearSEXP);
    Rcpp::traits::input_parameter< const double& >::type maxYear(maxYearSEXP);
    rcpp_result_gen = Rcpp::wrap(CountOdeintReturn(ystart, nVar, x1, x2, minYear, maxYear));
    return rcpp_result_gen;
END_RCPP
}
// SetCountModelParameters
void SetCountModelParameters(const Rcpp::List& param, const Rcpp::List& info);
RcppExport SEXP _hivModelling_SetCountModelParameters(SEXP paramSEXP, SEXP infoSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type info(infoSEXP);
    SetCountModelParameters(param, info);
    return R_NilValue;
END_RCPP
}
// TimeOdeintReturn
Rcpp::NumericVector TimeOdeintReturn(Rcpp::NumericVector& ystart, const size_t& nVar, const double& x1, const double& x2, const Rcpp::List& param, const Rcpp::List& info, const double& minYear, const double& maxYear, const double& tmpYear);
RcppExport SEXP _hivModelling_TimeOdeintReturn(SEXP ystartSEXP, SEXP nVarSEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP paramSEXP, SEXP infoSEXP, SEXP minYearSEXP, SEXP maxYearSEXP, SEXP tmpYearSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type ystart(ystartSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type nVar(nVarSEXP);
    Rcpp::traits::input_parameter< const double& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const double& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type info(infoSEXP);
    Rcpp::traits::input_parameter< const double& >::type minYear(minYearSEXP);
    Rcpp::traits::input_parameter< const double& >::type maxYear(maxYearSEXP);
    Rcpp::traits::input_parameter< const double& >::type tmpYear(tmpYearSEXP);
    rcpp_result_gen = Rcpp::wrap(TimeOdeintReturn(ystart, nVar, x1, x2, param, info, minYear, maxYear, tmpYear));
    return rcpp_result_gen;
END_RCPP
}
// FitLLNegBin
Rcpp::NumericVector FitLLNegBin(const Rcpp::NumericVector& y_m, const Rcpp::NumericVector& y_d, const double& r);
RcppExport SEXP _hivModelling_FitLLNegBin(SEXP y_mSEXP, SEXP y_dSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type y_m(y_mSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type y_d(y_dSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(FitLLNegBin(y_m, y_d, r));
    return rcpp_result_gen;
END_RCPP
}
// FitLLPoisson
Rcpp::NumericVector FitLLPoisson(const Rcpp::NumericVector& y_m, const Rcpp::NumericVector& y_d);
RcppExport SEXP _hivModelling_FitLLPoisson(SEXP y_mSEXP, SEXP y_dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type y_m(y_mSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type y_d(y_dSEXP);
    rcpp_result_gen = Rcpp::wrap(FitLLPoisson(y_m, y_d));
    return rcpp_result_gen;
END_RCPP
}
// Zbrent
double Zbrent(const Rcpp::Function& func, double x1, double x2, double tol, const Rcpp::List& extraArgs);
RcppExport SEXP _hivModelling_Zbrent(SEXP funcSEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP tolSEXP, SEXP extraArgsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type func(funcSEXP);
    Rcpp::traits::input_parameter< double >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< double >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type extraArgs(extraArgsSEXP);
    rcpp_result_gen = Rcpp::wrap(Zbrent(func, x1, x2, tol, extraArgs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hivModelling_GetDelta", (DL_FUNC) &_hivModelling_GetDelta, 5},
    {"_hivModelling_GetBSplineCubic", (DL_FUNC) &_hivModelling_GetBSplineCubic, 4},
    {"_hivModelling_GetBSpline", (DL_FUNC) &_hivModelling_GetBSpline, 7},
    {"_hivModelling_Swap1D", (DL_FUNC) &_hivModelling_Swap1D, 3},
    {"_hivModelling_Swap2D", (DL_FUNC) &_hivModelling_Swap2D, 5},
    {"_hivModelling_CountOdeintLoop", (DL_FUNC) &_hivModelling_CountOdeintLoop, 1},
    {"_hivModelling_CountOdeintReturn", (DL_FUNC) &_hivModelling_CountOdeintReturn, 6},
    {"_hivModelling_SetCountModelParameters", (DL_FUNC) &_hivModelling_SetCountModelParameters, 2},
    {"_hivModelling_TimeOdeintReturn", (DL_FUNC) &_hivModelling_TimeOdeintReturn, 9},
    {"_hivModelling_FitLLNegBin", (DL_FUNC) &_hivModelling_FitLLNegBin, 3},
    {"_hivModelling_FitLLPoisson", (DL_FUNC) &_hivModelling_FitLLPoisson, 2},
    {"_hivModelling_Zbrent", (DL_FUNC) &_hivModelling_Zbrent, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_hivModelling(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
