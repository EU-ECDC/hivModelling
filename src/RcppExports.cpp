// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "hivModelling_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// FitLLNegBin
NumericVector FitLLNegBin(NumericVector y_m, NumericVector y_d, double r);
RcppExport SEXP _hivModelling_FitLLNegBin(SEXP y_mSEXP, SEXP y_dSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_m(y_mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_d(y_dSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(FitLLNegBin(y_m, y_d, r));
    return rcpp_result_gen;
END_RCPP
}
// FitLLPoisson
NumericVector FitLLPoisson(NumericVector y_m, NumericVector y_d);
RcppExport SEXP _hivModelling_FitLLPoisson(SEXP y_mSEXP, SEXP y_dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_m(y_mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_d(y_dSEXP);
    rcpp_result_gen = Rcpp::wrap(FitLLPoisson(y_m, y_d));
    return rcpp_result_gen;
END_RCPP
}
// GetBSpline
double GetBSpline(double time, NumericVector theta, int kOrder, int modelSplineN, NumericVector myKnots, double minYear, double maxYear);
RcppExport SEXP _hivModelling_GetBSpline(SEXP timeSEXP, SEXP thetaSEXP, SEXP kOrderSEXP, SEXP modelSplineNSEXP, SEXP myKnotsSEXP, SEXP minYearSEXP, SEXP maxYearSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type kOrder(kOrderSEXP);
    Rcpp::traits::input_parameter< int >::type modelSplineN(modelSplineNSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type myKnots(myKnotsSEXP);
    Rcpp::traits::input_parameter< double >::type minYear(minYearSEXP);
    Rcpp::traits::input_parameter< double >::type maxYear(maxYearSEXP);
    rcpp_result_gen = Rcpp::wrap(GetBSpline(time, theta, kOrder, modelSplineN, myKnots, minYear, maxYear));
    return rcpp_result_gen;
END_RCPP
}
// GetDelta
NumericVector GetDelta(double time, List param);
RcppExport SEXP _hivModelling_GetDelta(SEXP timeSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< List >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(GetDelta(time, param));
    return rcpp_result_gen;
END_RCPP
}
// Sign
double Sign(double a, double b);
RcppExport SEXP _hivModelling_Sign(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(Sign(a, b));
    return rcpp_result_gen;
END_RCPP
}
// derivsMainFunc
NumericVector derivsMainFunc(double x, NumericVector y, double lambda, int nVar, List param, double year);
RcppExport SEXP _hivModelling_derivsMainFunc(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP nVarSEXP, SEXP paramSEXP, SEXP yearSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type nVar(nVarSEXP);
    Rcpp::traits::input_parameter< List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< double >::type year(yearSEXP);
    rcpp_result_gen = Rcpp::wrap(derivsMainFunc(x, y, lambda, nVar, param, year));
    return rcpp_result_gen;
END_RCPP
}
// derivsTimeFunc
NumericVector derivsTimeFunc(double x, NumericVector y, double lambda, int nVar, List param, double year);
RcppExport SEXP _hivModelling_derivsTimeFunc(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP nVarSEXP, SEXP paramSEXP, SEXP yearSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type nVar(nVarSEXP);
    Rcpp::traits::input_parameter< List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< double >::type year(yearSEXP);
    rcpp_result_gen = Rcpp::wrap(derivsTimeFunc(x, y, lambda, nVar, param, year));
    return rcpp_result_gen;
END_RCPP
}
// GetDerivsFuncXptr
DerivsFuncXPtr GetDerivsFuncXptr(std::string funcName);
RcppExport SEXP _hivModelling_GetDerivsFuncXptr(SEXP funcNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type funcName(funcNameSEXP);
    rcpp_result_gen = Rcpp::wrap(GetDerivsFuncXptr(funcName));
    return rcpp_result_gen;
END_RCPP
}
// odeint
List odeint(NumericVector ystart, int nVar, double x1, double x2, double eps, double h1, double hMin, List param, List info, double minYear, double maxYear, DerivsFuncXPtr derivsFunc, double tmpYear);
RcppExport SEXP _hivModelling_odeint(SEXP ystartSEXP, SEXP nVarSEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP epsSEXP, SEXP h1SEXP, SEXP hMinSEXP, SEXP paramSEXP, SEXP infoSEXP, SEXP minYearSEXP, SEXP maxYearSEXP, SEXP derivsFuncSEXP, SEXP tmpYearSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ystart(ystartSEXP);
    Rcpp::traits::input_parameter< int >::type nVar(nVarSEXP);
    Rcpp::traits::input_parameter< double >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< double >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type hMin(hMinSEXP);
    Rcpp::traits::input_parameter< List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< List >::type info(infoSEXP);
    Rcpp::traits::input_parameter< double >::type minYear(minYearSEXP);
    Rcpp::traits::input_parameter< double >::type maxYear(maxYearSEXP);
    Rcpp::traits::input_parameter< DerivsFuncXPtr >::type derivsFunc(derivsFuncSEXP);
    Rcpp::traits::input_parameter< double >::type tmpYear(tmpYearSEXP);
    rcpp_result_gen = Rcpp::wrap(odeint(ystart, nVar, x1, x2, eps, h1, hMin, param, info, minYear, maxYear, derivsFunc, tmpYear));
    return rcpp_result_gen;
END_RCPP
}
// rkck
List rkck(double x, NumericVector y, NumericVector dydx, int n, double h, List param, List info, int minYear, int maxYear, DerivsFuncXPtr derivsFunc, double tmpYear);
RcppExport SEXP _hivModelling_rkck(SEXP xSEXP, SEXP ySEXP, SEXP dydxSEXP, SEXP nSEXP, SEXP hSEXP, SEXP paramSEXP, SEXP infoSEXP, SEXP minYearSEXP, SEXP maxYearSEXP, SEXP derivsFuncSEXP, SEXP tmpYearSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dydx(dydxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< List >::type info(infoSEXP);
    Rcpp::traits::input_parameter< int >::type minYear(minYearSEXP);
    Rcpp::traits::input_parameter< int >::type maxYear(maxYearSEXP);
    Rcpp::traits::input_parameter< DerivsFuncXPtr >::type derivsFunc(derivsFuncSEXP);
    Rcpp::traits::input_parameter< double >::type tmpYear(tmpYearSEXP);
    rcpp_result_gen = Rcpp::wrap(rkck(x, y, dydx, n, h, param, info, minYear, maxYear, derivsFunc, tmpYear));
    return rcpp_result_gen;
END_RCPP
}
// rkqs
List rkqs(double x, NumericVector y, NumericVector dydx, int n, double htry, double eps, NumericVector yscal, List param, List info, int minYear, int maxYear, DerivsFuncXPtr derivsFunc, int tmpYear);
RcppExport SEXP _hivModelling_rkqs(SEXP xSEXP, SEXP ySEXP, SEXP dydxSEXP, SEXP nSEXP, SEXP htrySEXP, SEXP epsSEXP, SEXP yscalSEXP, SEXP paramSEXP, SEXP infoSEXP, SEXP minYearSEXP, SEXP maxYearSEXP, SEXP derivsFuncSEXP, SEXP tmpYearSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dydx(dydxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type htry(htrySEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yscal(yscalSEXP);
    Rcpp::traits::input_parameter< List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< List >::type info(infoSEXP);
    Rcpp::traits::input_parameter< int >::type minYear(minYearSEXP);
    Rcpp::traits::input_parameter< int >::type maxYear(maxYearSEXP);
    Rcpp::traits::input_parameter< DerivsFuncXPtr >::type derivsFunc(derivsFuncSEXP);
    Rcpp::traits::input_parameter< int >::type tmpYear(tmpYearSEXP);
    rcpp_result_gen = Rcpp::wrap(rkqs(x, y, dydx, n, htry, eps, yscal, param, info, minYear, maxYear, derivsFunc, tmpYear));
    return rcpp_result_gen;
END_RCPP
}
// zbrent
double zbrent(Function func, double x1, double x2, double tol, List extraArgs);
RcppExport SEXP _hivModelling_zbrent(SEXP funcSEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP tolSEXP, SEXP extraArgsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Function >::type func(funcSEXP);
    Rcpp::traits::input_parameter< double >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< double >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< List >::type extraArgs(extraArgsSEXP);
    rcpp_result_gen = Rcpp::wrap(zbrent(func, x1, x2, tol, extraArgs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hivModelling_FitLLNegBin", (DL_FUNC) &_hivModelling_FitLLNegBin, 3},
    {"_hivModelling_FitLLPoisson", (DL_FUNC) &_hivModelling_FitLLPoisson, 2},
    {"_hivModelling_GetBSpline", (DL_FUNC) &_hivModelling_GetBSpline, 7},
    {"_hivModelling_GetDelta", (DL_FUNC) &_hivModelling_GetDelta, 2},
    {"_hivModelling_Sign", (DL_FUNC) &_hivModelling_Sign, 2},
    {"_hivModelling_derivsMainFunc", (DL_FUNC) &_hivModelling_derivsMainFunc, 6},
    {"_hivModelling_derivsTimeFunc", (DL_FUNC) &_hivModelling_derivsTimeFunc, 6},
    {"_hivModelling_GetDerivsFuncXptr", (DL_FUNC) &_hivModelling_GetDerivsFuncXptr, 1},
    {"_hivModelling_odeint", (DL_FUNC) &_hivModelling_odeint, 13},
    {"_hivModelling_rkck", (DL_FUNC) &_hivModelling_rkck, 11},
    {"_hivModelling_rkqs", (DL_FUNC) &_hivModelling_rkqs, 13},
    {"_hivModelling_zbrent", (DL_FUNC) &_hivModelling_zbrent, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_hivModelling(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
